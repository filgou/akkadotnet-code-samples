<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
  </configSections>
  <runtime>
    <AppContextSwitchOverrides value="Switch.System.Runtime.Serialization.UseNewMaxArraySize=true" />
    <Thread_UseAllCpuGroups enabled="true" />
    <GCCpuGroup enabled="true" />
    <gcServer enabled="true" />
    <enforceFIPSPolicy enabled="false" />
  </runtime>
  <!--<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" /></startup>-->
  <akka>
    <hocon>
      <![CDATA[
akka {
    # The stdout-loglevel is only in effect during system startup and shutdown, and setting it to OFF as well, ensures that nothing gets logged during system startup or shutdown.
    # Options: OFF, ERROR, WARNING, INFO, DEBUG
    stdout-loglevel = DEBUG
    
    # Log level used by the configured loggers (see "loggers") as soon
    # as they have been started; before that, see "stdout-loglevel"
    # Options: OFF, ERROR, WARNING, INFO, DEBUG
    loglevel = INFO
    
    # Log the complete configuration at INFO level when the actor system is started.
    # This is useful when you are uncertain of what configuration is used.
    # log-config-on-start = on
    
    # Loggers to register at boot time (Akka.Event.DefaultLogger logs to STDOUT)
    #loggers = ["SunGard.BancWare.Focus.Services.AkkaTraceLogger, CalculationEngineService"]
    actor {
        provider = cluster
        debug {
            # receive = on 
            # autoreceive = on
            # lifecycle = on
            # event-stream = on
            unhandled = on
            # fsm = on
        }
        serializers : {
        akka-pubsub : "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools"
      }
      serialization-bindings : {
        "Akka.Cluster.Tools.PublishSubscribe.IDistributedPubSubMessage, Akka.Cluster.Tools" : akka-pubsub
        "Akka.Cluster.Tools.PublishSubscribe.Internal.SendToOneSubscriber, Akka.Cluster.Tools" : akka-pubsub
      }
      serialization-identifiers : {
        "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools" : 9
      }
    }
    remote {
        dot-netty.tcp {
            send-buffer-size = 64MB
            receive-buffer-size = 64MB
            maximum-frame-size = 32MB
            
            # The host name or IP address of the local machine that Akka will bind to. This value is required in case of multiple IP addresses.
            # examples:
            #   hostname = 123.45.67.89
            #   hostname = "server"
            #   hostname = "server.domain.com"
            # hostname = <value>
            
            # The host name or IP address of the local machine that Akka will advertise itself as when talking to other servers.
            # This value will be used as the public address of the actor system which might be different than the physical IP address (hostname).
            # This is designed to support private/public addressing schemes.
            # examples:
            #   public-hostname = 123.45.67.89
            #   public-hostname = "server"
            #   public-hostname = "server.domain.com"
            # public-hostname = <value>
            
            # If set to "on", Akka will log all outbound messages at DEBUG level, if set to "off" then they are not logged
            log-sent-messages = off
            
            # If set to "on", Akka will log all inbound messages at DEBUG level, if set to "off" then they are not logged
            log-received-messages = off
            
            # Sets the log granularity level at which Akka logs remoting events. This setting
            # can take the values OFF, ERROR, WARNING, INFO, DEBUG, or ON. For compatibility
            # reasons the setting "on" will default to "debug" level. Please note that the effective
            # logging level is still determined by the global logging level of the actor system:
            # for example debug level remoting events will be only logged if the system
            # is running with debug level logging.
            # Failures to deserialize received messages also fall under this flag.
            log-remote-lifecycle-events = off
        }
    }
    cluster {
        failure-detector {
            heartbeat-interval = 3s
            acceptable-heartbeat-pause = 120s
            expected-response-after = 10s
        }
        
        # Enable/disable info level logging of cluster events
        log-info = on
        
        debug {
            # log heartbeat events (very verbose, useful mostly when debugging heartbeating issues)
            verbose-heartbeat-logging = off
            
            # log gossip merge events (very verbose, useful when debugging convergence issues)
            verbose-receive-gossip-logging = off
        }
        
        # low-priority-resources = 1
    }
    extensions = "Akka.Cluster.Tools.Client.ClusterClientReceptionistExtensionProvider, Akka.Cluster.Tools"
}]]>
    </hocon>
  </akka>
</configuration>